@{
    ViewData["Title"] = "Pencere Kontrolü";
}


<style>
    

    #window-frame {
        width: 300px;
        height: 400px;
        border: 2px solid #333;
        position: relative;
        overflow: hidden;
        margin: 20px auto;
        border-radius: 10px;
        background: #87CEEB; 
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    }

   
    #window-grid {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr;
        gap: 5px;
        padding: 1px;
        border-style:solid;
        border-color:#69a1d1;
        border-width:10px;
        background: url('https://cdn.pixabay.com/photo/2021/09/20/21/32/lake-6641880_1280.jpg') no-repeat center center;
        background-size: cover;
    }

    .glass {
        background: transparent;
        border: 2px solid rgba(255, 255, 255, 0.6);
        border-radius: 5px;
        box-shadow: inset 0 0 10px rgba(255, 255, 255, 0.5);
        transition: opacity 0.5s ease;
    }

   
    #shutter {
        width: 100%;
        height: 100%;
        background: linear-gradient(to bottom, #555, #777);
        position: absolute;
        top: 0;
        transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1), height 0.8s ease;
        border-bottom: 2px solid #333;
        border-top: 2px solid #333;
        transform-origin: top;
        border-radius: 0 0 10px 10px;
    }

    
    #roller {
        width: 100%;
        height: 20px;
        background: #333;
        position: absolute;
        top: 0;
        left: 0;
        border-radius: 10px 10px 0 0;
    }

    input[type="range"] {
        width: 300px;
        margin: 10px auto;
        display: block;
    }

    button {
        padding: 10px 15px;
        margin: 5px;
        border: none;
        background-color: #007BFF;
        color: white;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.1s;
    }

        button:disabled {
            background-color: #aaa;
            cursor: not-allowed;
        }

        button:hover:not(:disabled) {
            background-color: #0056b3;
            transform: scale(1.05);
        }
</style>


<h2>Pencereyi Kontrol Et</h2>

<div id="window-frame">
    <div id="window-grid">
        <div class="glass"></div>
        <div class="glass"></div>
        <div class="glass"></div>
        <div class="glass"></div>
    </div>
    <div id="roller"></div>  
    <div id="shutter"></div> 
</div>

<input type="range" id="slider" min="0" max="100" value="100" />
<p>Seviye: <span id="sliderValue">100%</span></p>

<button id="btnOpen">Aç</button>
<button id="btnClose">Kapat</button>

<script>
            document.addEventListener("DOMContentLoaded", function () {
        const slider = document.getElementById("slider");
        const sliderValue = document.getElementById("sliderValue");
        const shutter = document.getElementById("shutter");
        const glassElements = document.querySelectorAll(".glass");
        const btnOpen = document.getElementById("btnOpen");
        const btnClose = document.getElementById("btnClose");

        let currentLevel = 100;
        let lastSentValue = 100;


           function updateUI(level) {
        slider.value = level;
        sliderValue.textContent = level + "%";
        shutter.style.transform = `scaleY(${level / 100})`;
        shutter.style.height = `${level}%`;

        const opacity = 0.4 + (level / 300) * 0.6;
        glassElements.forEach(glass => {
            glass.style.opacity = opacity;
        });

        btnOpen.disabled = (level === 0);
        btnClose.disabled = (level === 100);
    }



       
        slider.addEventListener("input", () => {
            const value = parseInt(slider.value);
            updateUI(value);
        });

       
        slider.addEventListener("mouseup", sendFinalCommand);
        slider.addEventListener("touchend", sendFinalCommand);

        function sendFinalCommand() {
            const value = parseInt(slider.value);
            if (value !== lastSentValue) {
                sendCommand(`${value}`);
                lastSentValue = value;
            }
        }

        btnOpen.addEventListener("click", () => {
            if (currentLevel !== 0) {
                sendCommand("100");
                currentLevel = 0;
                updateUI(currentLevel);
            }
        });

        btnClose.addEventListener("click", () => {
            if (currentLevel !== 100) {
                sendCommand("0");
                currentLevel = 100;
                updateUI(currentLevel);
            }
        });

        function sendCommand(command) {
            const payload = { command };
            fetch("/Device/send-command-js", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            })
                .then(response => {
                    if (!response.ok) return response.json().then(data => console.error("Hata: ", data));
                    console.log("Komut gönderildi: ", command);
                })
                .catch(error => console.error("Fetch hatası: ", error));
        }

        updateUI(currentLevel);
    });


</script>
